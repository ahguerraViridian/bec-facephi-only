package com.baneco.application;

import android.Manifest;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.app.NotificationManager;
import android.content.Context;
import android.util.Log;
import android.app.NotificationChannel;
import android.widget.EditText;
import android.widget.Toast;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import io.flutter.plugins.GeneratedPluginRegistrant;
//import io.flutter.app.FlutterFragmentActivity;
import io.flutter.embedding.android.FlutterFragmentActivity;
import io.flutter.embedding.android.FlutterActivity;
import io.flutter.embedding.engine.FlutterEngine;
import io.flutter.plugin.common.MethodCall;

import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import io.flutter.plugin.common.MethodChannel;
import androidx.annotation.NonNull;
import com.example.vumodule.VUActivity;

import retrofit2.Response;

import android.app.Dialog;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.ColorDrawable;
import android.os.Build;
import android.util.Base64;
import android.util.Log;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

import com.afollestad.materialdialogs.MaterialDialog;
import java.io.IOException;
import java.util.HashMap;
import java.util.Objects;


import static android.content.ContentValues.TAG;

public class MainActivity extends FlutterFragmentActivity {

  private static final String REGISTER_NOTIFICATION_CHANNEL = "RegisterNotificationChannel";
  private static final String NOTIFICATION_CHANNEL = "MyNotificationChannel";
  private static final String FACEBOOK_EVENTS_CHANNEL = "FacebookInstallEventChannel";
  private static final String SHARED_IMAGE_CHANNEL = "SharedImageChannel";
  private static final String PERMISSIONS_CHANNEL = "PermissionsChannel";
  private static final String VU_CHANNEL = "com.baneco.application/vu";
  MethodChannel.Result vuResult;
  private byte[] inputData;
  private static final int MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE = 1234;
  Activity thisActivity = this;
  MethodChannel.Result permissionsResult;

  @Override
   public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) {
      GeneratedPluginRegistrant.registerWith(flutterEngine);
    new MethodChannel(getFlutterEngine().getDartExecutor().getBinaryMessenger(), REGISTER_NOTIFICATION_CHANNEL).setMethodCallHandler((call, result) -> {
      if(call.method.equals("registerChannel")) {
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
          String id = getResources().getString(R.string.notification_channel_id);
          String name = getResources().getString(R.string.notification_channel_name);
          String description = getResources().getString(R.string.notification_channel_desc);

          NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
          NotificationChannel mChannel = new NotificationChannel(id, name, NotificationManager.IMPORTANCE_HIGH);
          mChannel.setDescription(description);

          notificationManager.createNotificationChannel(mChannel);
          result.success("Notification channel " + name + " created");
        } else {
          result.success("Android version is less than Oreo");
        }
      }
    });

    new MethodChannel(getFlutterEngine().getDartExecutor().getBinaryMessenger(), NOTIFICATION_CHANNEL).setMethodCallHandler((call, result) -> {
      if (call.method.equals("clearNotifications")) {
        cancelAllNotifications();
        result.success("Success!");
      } else {
        result.notImplemented();
      }
    });

    new MethodChannel(getFlutterEngine().getDartExecutor().getBinaryMessenger(), SHARED_IMAGE_CHANNEL).setMethodCallHandler((call, result) -> {
      if (call.method.contentEquals("getSharedImage")) {
        result.success(inputData);
        inputData = null;
        return ;
      }
    });

    new MethodChannel(getFlutterEngine().getDartExecutor().getBinaryMessenger(), PERMISSIONS_CHANNEL).setMethodCallHandler((call, result) -> {
      if (call.method.contentEquals("checkWriteExternalStoragePermission")) {
        boolean response = isAPI23Up()? checkPermission(thisActivity) : true;
        result.success(response);
        return;
      }
      if (call.method.equals("requestWriteExternalStoragePermission")) {
        permissionsResult = result;
        if (isAPI23Up()) {
          requestPermission(thisActivity);
        }
        else {
          result.success(true);
        }
        return;
      }
    });
    new MethodChannel(getFlutterEngine().getDartExecutor().getBinaryMessenger(), VU_CHANNEL).setMethodCallHandler((call, result) -> {
      if (call.method.contentEquals("VU_SDK")) {

        Intent getVUScreenIntent = new Intent(this,VUActivity.class);
        String mode = call.argument("mode");
        Log.i("REGFront", "Received from flutter..... "+mode);
        getVUScreenIntent.putExtra("MODE",mode);
        vuResult = result;
        startActivityForResult(getVUScreenIntent, 100);

      }
    });

    Intent intent = getIntent();
    onNewIntent(intent);
    String action = intent.getAction();
    String type = intent.getType();
    String TAG = "intentTest";
    if ((Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) && type != null) {
      Log.d(TAG, "handleSendIntent: Intent type: " + type);
      if ("image/*".equals(type)||"image/jpg".equals(type)||"image/jpeg".equals(type)||"image/png".equals(type)) {
        handleSendText(intent, action); // Handle text being sent
      }
    }
 }



  @Override
  protected void onNewIntent(Intent intent) {
    super.onNewIntent(intent);
    Log.d("intentTest", "onNewIntent()...");
    String action = intent.getAction();
    String type = intent.getType();
    String TAG = "intentTest";
    Log.d(TAG, "handleSendIntent: action type: " + action);
    if ((Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) && type != null) {
      Log.d(TAG, "handleSendIntent: Intent type: " + type);
      if ("image/*".equals(type)||"image/jpg".equals(type)||"image/jpeg".equals(type)||"image/png".equals(type)) {
        handleSendText(intent, action); // Handle text being sent
      }
    }
    new MethodChannel(getFlutterEngine().getDartExecutor().getBinaryMessenger(), SHARED_IMAGE_CHANNEL).setMethodCallHandler((call, result) -> {
      if (call.method.contentEquals("getSharedImage")) {
        result.success(inputData);
        inputData = null;
      }
    });
  }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

//        TextView usersNameMessage = (TextView) findViewById(R.id.user)
      if(requestCode == 100) {
        if(resultCode == RESULT_CANCELED) {
            vuResult.success(null);
        }

        if(resultCode == RESULT_OK) {
            String nameSentBack = data.getStringExtra("VUResult");
            vuResult.success(nameSentBack);
        }

      }

    }




  public void handleSendText(Intent intent, String action) {
    String TAG = "intentTest";
    Uri selectedImageUri;
    if (Intent.ACTION_SEND_MULTIPLE.equals(action)){
      ArrayList arrayInt = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
      Log.d(TAG, "handleSendIntent: Object is: "+arrayInt.get(0));
      Log.d(TAG, "handleSendIntent: Object name is: "+arrayInt.get(0).getClass().getName());
      selectedImageUri = (Uri) arrayInt.get(0);
    } else{
      selectedImageUri= intent.getParcelableExtra(Intent.EXTRA_STREAM);
      Log.d(TAG, "handleSendIntent: Object is: "+selectedImageUri);
      Log.d(TAG, "handleSendIntent: Object name is: "+selectedImageUri.getClass().getName());
    }

    try {
      Log.d(TAG, "handleSendIntent: Fetching image data...");
      InputStream iStream =   getContentResolver().openInputStream(selectedImageUri);
      inputData = getBytes(iStream);
    } catch (FileNotFoundException e) {
      if (e.getMessage().contains("permission denied")){
        inputData = new byte[] {(byte)0xe0};
      }
      e.printStackTrace();
      Log.e(TAG, "handleSendIntent: ERROR: "+e);
    }
//    catch (IOException e) {
//      e.printStackTrace();
//      Log.e(TAG, "handleSendIntent: ERROR: "+e);
//    }
    catch(Exception e) {
      e.printStackTrace();
      Log.e(TAG, "handleSendIntent: ERROR: "+e);
    }
  }

  public byte[] getBytes(InputStream inputStream) throws IOException {
    ByteArrayOutputStream byteBuffer = new ByteArrayOutputStream();
    int bufferSize = 1024;
    byte[] buffer = new byte[bufferSize];

    int len = 0;
    while ((len = inputStream.read(buffer)) != -1) {
      byteBuffer.write(buffer, 0, len);
    }
    return byteBuffer.toByteArray();
  }

  private boolean isAPI23Up () {
    return android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.M;
  }

  private boolean checkPermission (Activity thisActivity) {
    return ContextCompat.checkSelfPermission(thisActivity,Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
  }

  private void requestPermission (Activity thisActivity) {
    Log.i(TAG, "requestPermission: REQUESTING");
    ActivityCompat.requestPermissions(thisActivity, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE);
  }

  private void cancelAllNotifications() {
    NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
    notificationManager.cancelAll();
  }
}
