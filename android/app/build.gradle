def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
    keystorePropertiesFile.withReader('UTF-8') { reader ->
        keystoreProperties.load(reader)
    }

android {
    ndkVersion "23.0.7196353"
    compileSdkVersion 31
    buildToolsVersion "28.0.3"
    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

    bundle {
        language {
            enableSplit = true
        }
    }
    
    defaultConfig {
        applicationId "com.baneco.application"
        minSdkVersion 21
        targetSdkVersion 31
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // ndk {
        //     abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips64', 'mips64', 'mips'
        // }

    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            // // shrinkResources true
            // minifyEnabled true
            signingConfig signingConfigs.release
         
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a','x86', 'x86_64'
            }
        }
        debug {
            // // minifyEnabled true
          
        }
    }
   
    flavorDimensions  "flavor-type"
    productFlavors {
        bot {
            dimension "flavor-type"
            applicationIdSuffix ".bot"
            versionNameSuffix "-bot"
        }
        dev {
            dimension "flavor-type"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }
        automated {
            dimension "flavor-type"
            applicationIdSuffix ".testing"
            versionNameSuffix "-testing"
        }
        stage {
            dimension "flavor-type"
            applicationIdSuffix ".stage"
            versionNameSuffix "-stage"
        }
        prod {
            dimension "flavor-type"
        }
        preprod {
            dimension "flavor-type"
            applicationIdSuffix ".preprod"
            versionNameSuffix "-preprod"
        }
        master {
            dimension "flavor-type"
            applicationIdSuffix ".master"
            versionNameSuffix "-master"
        }

    }


}

flutter {
    source '../..'
}

dependencies {
    implementation 'com.facebook.android:facebook-android-sdk:[5,6)'
}

apply plugin: 'com.google.gms.google-services'
android.defaultConfig.ndk.debugSymbolLevel = 'FULL'
